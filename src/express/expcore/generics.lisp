(in-package :EXPRESSO)

;;; Copyright (c) 2002 Logicon, Inc.
;;;
;;; Permission is hereby granted, free of charge, to any person
;;; obtaining a copy of this software and associated documentation
;;; files (the "Software"), to deal in the Software without restriction,
;;; including without limitation the rights to use, copy, modify,
;;; merge, publish, distribute, sublicense, and/or sell copies of the
;;; Software, and to permit persons to whom the Software is furnished
;;; to do so, subject to the following conditions:
;;;
;;; The above copyright notice and this permission notice shall be
;;; included in all copies or substantial portions of the Software.
;;;
;;; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;;; EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;;; MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;;; IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
;;; ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
;;; CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
;;; WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
;;;-----------------------------------------------------------------------


;;;
;;; Generic Function definitions
;;;

(defgeneric %agg-size (aggregate))

(defgeneric make-one (type &optional initial-value))
(defgeneric make-empty-copy (object))
(defgeneric store-instance (instance &optional name &key &allow-other-keys))
(defgeneric extent (type dataset &key &allow-other-keys))
(defgeneric instances-of (type dataset))

(defgeneric attribute-data (class encoding &key &allow-other-keys))
(defgeneric write-entity (entity stream encoding &key &allow-other-keys)
  (:argument-precedence-order stream entity encoding)
  (:method (obj (str Null) encode &rest options)
   (with-output-to-string (string)
     (apply #'write-entity obj string encode options))))

(defgeneric write-attribute (attribute entity stream encoding &key &allow-other-keys))
(defgeneric write-db (stream encoding &key &allow-other-keys))

(defgeneric set-expresso-option-buttons (expresso-options &key &allow-other-keys))

(defgeneric p11-string (object accumulator encoding &key &allow-other-keys))
(defgeneric find-map (map schema &key &allow-other-keys))
(defgeneric show-map (map schema &optional stream))

;; Built-Ins
(defgeneric type-compatible-p-method (type1 type2))
(defgeneric in-internal (item aggregate))
(defgeneric typeof-internal (value))
(defgeneric express-equal (arg1 arg2))
(defgeneric express-not-equal (arg1 arg2))
(defgeneric express-plus (arg1 arg2))
(defgeneric express-minus (arg1 arg2))
(defgeneric express-unary-minus (arg1))
(defgeneric express-mult (arg1 arg2))
(defgeneric express-divide (arg1 arg2))
(defgeneric express-div (arg1 arg2))
(defgeneric express-mod (arg1 arg2))
(defgeneric express-< (arg1 arg2))
(defgeneric express-<= (arg1 arg2))
(defgeneric express-> (arg1 arg2))
(defgeneric express->= (arg1 arg2))
(defgeneric express-instance-equal (arg1 arg2))
(defgeneric express-instance-not-equal (arg1 arg2))
(defgeneric bi-hiindex (aggregate))
(defgeneric bi-loindex (aggregate))
(defgeneric bi-hibound (aggregate))
(defgeneric bi-lobound (aggregate))
(defgeneric make-entity-instance (type &rest initvals))
;; these are generated by the macro GENERATE-TRIG-METHOD
(defgeneric bi-abs  (arg))
(defgeneric bi-acos (arg))
(defgeneric bi-asin (arg))
(defgeneric bi-atan (arg))
(defgeneric bi-cos  (arg))
(defgeneric bi-exp  (arg))
(defgeneric bi-log  (arg))
(defgeneric bi-sin  (arg))
(defgeneric bi-tan  (arg))
(defgeneric bi-sqrt (arg))
;; end generated methods
(defgeneric bi-backward-path-op (target attribute entity path-condition))
(defgeneric bi-forward-path-op  (source attribute entity path-condition))
(defgeneric bi-value_in (aggregate item))
(defgeneric bi-value_unique (aggregate))
(defgeneric bi-query (source expression))


;; Data Converstion API
(defgeneric convert-data (source target &key &allow-other-keys))

;; Mapping Engine API
(defgeneric evaluate (map x-eval))
(defgeneric binding  (map x-eval &optional partition &rest parameters))
(defgeneric mapcall  (map x-eval &optional partition &rest parameters))
(defgeneric clear-bindings (schema))

;; File API
(defgeneric read-schema (model-file &key &allow-other-keys))
(defgeneric read-data   (model-file &key &allow-other-keys))
(defgeneric save-data   (model-file stream &key &allow-other-keys))

;; Option/Special API
(defgeneric option-get (frame slot))
(defgeneric option-set (frame slot value))
(defgeneric option-incf (frame slot &optional delta))
(defgeneric option-decf (frame slot &optional delta))

;; Dataset API
(defgeneric clear-dataset  (dataset))
(defgeneric add-dataset    (dataset frame))
(defgeneric remove-dataset (dataset frame &key &allow-other-keys))

;; Schema API
(defgeneric add-schema    (schema frame))
(defgeneric remove-schema (name frame  &key &allow-other-keys)) ;; key test

;; Schema-Aliases API
(defgeneric alias-add    (alias frame))
(defgeneric alias-remove (name frame &key &allow-other-keys)) ;; key test
(defgeneric alias-find   (name frame &key &allow-other-keys)) ;; key test

;; message API
(defgeneric note-message (frame type string &rest args)
  ;; This GF implements the actual interface to the running window
  ;; application whether it is CLIM or CAPI based.
  ;; most code will call the functions INFO-MESSAGE or ALERT-MESSAGE
  (:method ((frame Null) type string &rest args)
   (declare (ignore type string args))
   nil)
  )

;;; Generics below this line need to be moved to appropriate places above
;; expcore/schemas.lsp

;; expcore/datasets.lsp
(defgeneric dataset-entity-count (dataset))
(defgeneric dataset-uniqueness-ht (dataset class))
(defgeneric entity-id (instance dataset))
(defgeneric entity-dataset (instance))
